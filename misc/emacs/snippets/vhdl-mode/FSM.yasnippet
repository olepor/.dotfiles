# -*- mode: snippet -*-
# name: FSM-snippet
# key: FSM
# contributor: olepor@student.matnat.uio.no
# type: snippet
# --
library ieee;
use ieee.std_logic_1164.all;

entity fsme is
  port (SET,X,CLK : in std_logic;
        Z2        : out std_logic;
        Y         : out std_logic_vector(1 downto 0);
end fsme

architecture imp_fsme of fsme is
  type state_type (ST0,ST1,ST2);
  signal PS,NS : state_type;
begin
  asyn_process: process(CLK,SET,NS) -- the async process
  begin
    if (SET = '1') then
      NS <= PS2;
    elsif (rising_edge(CLK)) then
      PS <= NS;
    end if
  end process asyn_process;

  -- handle the state machine
  state_process: process(PS,X)
  begin
    Z2 <= '0'; -- pre assign a starting value (Mealy output)
    case PS is
      when ST0 =>             -- state 0
        Z2 <= '0';
        if (X = '1') then
          NS <= ST1;
        else
          NS <= PS;
        end if
      when ST1 =>             -- state 1
        Z2 <= '0';
        if (X = '1') then
          NS <= ST2;
        else
          NS <= ST0;
        end if
      when ST2 =>             -- state 2
        if (X = '1') then
          NS <= PS;
          Z2 <= '1';
        else
          NS <= ST0;
          Z2 <= '0';
        end if
      when others -- irrelevant. Should never occur!
        Z2 <= '1';
        NS <= PS;
  end case
end process state_process;

with PS select
  Y <= "00" when ST0,
  "10" when ST1,
  "11" when ST2,
  "00" when others;
end imp_fsme
